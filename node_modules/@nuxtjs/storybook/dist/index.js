"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.build = build;
exports.eject = eject;
exports.start = start;

var _fs = require("fs");

var _path2 = _interopRequireDefault(require("path"));

var _pathe = require("pathe");

var _options = _interopRequireDefault(require("@storybook/vue/dist/cjs/server/options"));

var _coreServer = require("@storybook/core-server");

var _utils = require("./utils");

var _webpack = require("./webpack");

var _middlewares = _interopRequireDefault(require("./runtime/middlewares"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function build(options) {
  const buildOptions = await getStorybookConfig(options);
  (0, _coreServer.buildStatic)(buildOptions);
}

async function start(options) {
  const buildOptions = await getStorybookConfig(options);
  (0, _coreServer.buildDev)(buildOptions);
}

async function getStorybookConfig(options) {
  const {
    nuxt,
    nuxtBuilder,
    nuxtWebpackConfig,
    nuxtStorybookConfig
  } = await buildNuxt(options);
  nuxt.options.serverMiddleware.forEach(m => {
    if (typeof m === "string") {
      m = nuxt.resolver.resolvePath(m);
    }

    if (typeof m.handler === "string") {
      m.handler = nuxt.resolver.resolvePath(m.handler);
    }

    _middlewares.default.addServerMiddleware(m);
  });
  const userWebpackFinal = nuxtStorybookConfig.webpackFinal;

  nuxtStorybookConfig.webpackFinal = (config, options2) => {
    config = (0, _webpack.getWebpackConfig)(config, options2);

    if (typeof userWebpackFinal === "function") {
      config = userWebpackFinal(config, options2);
    }

    return config;
  };

  if (!options.staticDir) {
    const staticDirPath = _path2.default.resolve(nuxt.options.srcDir, nuxt.options.dir.static);

    if ((0, _fs.existsSync)(staticDirPath)) {
      options.staticDir = staticDirPath;
    }
  }

  const staticDir = (options.staticDir || "").split(",").map(dir => dir.trim()).filter(Boolean);
  return { ..._options.default,
    packageJson: require("../package.json"),
    versionUpdates: false,
    rootDir: options.rootDir,
    configDir: nuxtStorybookConfig.configDir,
    port: parseInt(process.env.PORT_STORYBOOK || process.env.PORT || nuxtStorybookConfig.port || 3003, 10),
    nuxt,
    nuxtBuilder,
    nuxtWebpackConfig,
    nuxtStorybookConfig,
    ...options,
    staticDir,
    frameworkPresets: [require.resolve("./preset"), ..._options.default.frameworkPresets]
  };
}

async function buildNuxt(options) {
  (0, _utils.ensureCoreJs3)(options.rootDir);

  const buildDir = _path2.default.resolve(options.rootDir, ".nuxt-storybook");

  const {
    loadNuxt,
    getBuilder
  } = (0, _utils.requireMaybeEdge)("nuxt");

  const tsConfigPath = _path2.default.resolve(options.tsconfig || options.rootDir, options.tsconfig ? "" : "tsconfig.json");

  if ((0, _fs.existsSync)(tsConfigPath)) {
    const tsNode = (0, _utils.requireTsNodeOrFail)();
    tsNode.register({
      project: tsConfigPath,
      compilerOptions: {
        module: "commonjs"
      },
      transpileOnly: true
    });
  }

  const nuxt = await loadNuxt({ ...options,
    rootDir: options.rootDir,
    for: options.mode,
    configOverrides: {
      ssr: false,
      buildDir,
      build: {
        corejs: "3",
        extractCSS: false,
        parallel: false
      },
      buildModules: ["@nuxt/postcss8"]
    },
    transpile: [_path2.default.resolve(__dirname, "../storybook")]
  });
  nuxt.options.plugins = nuxt.options.plugins.filter(plugin => {
    if (typeof plugin === "object") {
      return !plugin.mode || plugin.mode === "client";
    }

    if (typeof plugin === "string" && plugin.match(/\.server\.?(.*)\.(ts|js)/)) {
      return false;
    }

    return true;
  });
  const nuxtBuilder = await getBuilder(nuxt);
  const {
    bundleBuilder
  } = nuxtBuilder;
  const nuxtStorybookConfig = await nuxtStorybookOptions(nuxt, nuxt.options);
  nuxt.options.build.transpile = [...(nuxt.options.build.transpile || []), /.*\.stories\.js$/];
  generateStorybookFiles.call(nuxt.moduleContainer, { ...nuxtStorybookConfig,
    nuxtOptions: nuxt.options,
    moduleDir: __dirname
  });
  nuxtBuilder.bundleBuilder = {
    build() {},

    close() {}

  };
  await nuxtBuilder.build();
  const nuxtWebpackConfig = await bundleBuilder.getWebpackConfig("client");
  await nuxt.callHook("webpack:config", [nuxtWebpackConfig]);
  nuxt.hook("watch:restart", () => {
    nuxt.close();
    buildNuxt(options);
  });
  return {
    nuxt,
    nuxtBuilder,
    nuxtWebpackConfig,
    nuxtStorybookConfig
  };
}

function generateStorybookFiles(options) {
  const templatesRoot = _path2.default.resolve(__dirname, "../storybook");

  this.addTemplate({
    src: _path2.default.resolve(templatesRoot, "main.js"),
    fileName: _path2.default.join("storybook", "main.js"),
    options
  });
  this.addTemplate({
    src: _path2.default.resolve(templatesRoot, "middleware.js"),
    fileName: _path2.default.join("storybook", "middleware.js"),
    options
  });
  this.addTemplate({
    src: _path2.default.resolve(templatesRoot, "preview.js"),
    fileName: _path2.default.join("storybook", "preview.js"),
    options
  });
  this.addTemplate({
    src: _path2.default.resolve(templatesRoot, "entry.js"),
    fileName: _path2.default.join("storybook", "entry.js"),
    options
  });
  this.addTemplate({
    src: _path2.default.resolve(templatesRoot, "nuxt-entry.js"),
    fileName: _path2.default.join("storybook", "nuxt-entry.js"),
    options
  });
  this.addTemplate({
    src: _path2.default.resolve(templatesRoot, "package-template.json"),
    fileName: _path2.default.join("storybook", "package.json"),
    options
  });
}

function eject(options) {
  const configDir = _path2.default.resolve(options.rootDir, ".storybook");

  const templatesRoot = _path2.default.resolve(__dirname, "../storybook");

  if ((0, _fs.existsSync)(configDir)) {
    if (!options.force) {
      _utils.logger.warn("Storybook is already ejected, use `--force` to overwrite files.");

      return;
    }
  } else {
    (0, _fs.mkdirSync)(configDir);
  }

  (0, _utils.compileTemplate)(_path2.default.resolve(templatesRoot, "eject", "main.js"), _path2.default.join(configDir, "main.js"), {});
  (0, _utils.compileTemplate)(_path2.default.resolve(templatesRoot, "eject", "middleware.js"), _path2.default.join(configDir, "middleware.js"), {});
  (0, _utils.compileTemplate)(_path2.default.resolve(templatesRoot, "eject", "preview.js"), _path2.default.join(configDir, "preview.js"), {});
}

async function nuxtStorybookOptions(nuxt, options) {
  const nuxtStorybookConfig = Object.assign({
    stories: [],
    addons: [],
    decorators: [],
    parameters: {},
    globalTypes: {},
    modules: true
  }, options.storybook);
  nuxtStorybookConfig.configDir = _path2.default.resolve(options.rootDir, ".storybook");

  if (!(0, _fs.existsSync)(nuxtStorybookConfig.configDir)) {
    nuxtStorybookConfig.configDir = _path2.default.resolve(options.rootDir, ".nuxt-storybook", "storybook");
  }

  let srcDir = options.srcDir || options.rootDir;

  if (!srcDir.startsWith("/")) {
    srcDir = _path2.default.resolve(options.rootDir, srcDir);
  }

  const storiesDir = _path2.default.resolve(srcDir, "components");

  if ((0, _fs.existsSync)(storiesDir)) {
    nuxtStorybookConfig.stories.unshift("~/components/**/*.stories.@(ts|js)");
  }

  if (nuxtStorybookConfig.decorators.find(decorator => typeof decorator !== "string")) {
    _utils.logger.warn("Decorators inside `nuxt.config` should be simple template strings. Non-string decorators will be ignored.");

    nuxtStorybookConfig.decorators = nuxtStorybookConfig.decorators.filter(decorator => typeof decorator === "string");
  }

  const essentials = nuxtStorybookConfig.addons.find(addon => addon === "@storybook/addon-essentials" || addon.name === "@storybook/addon-essentials");

  if (!essentials) {
    nuxtStorybookConfig.addons.unshift("@storybook/addon-essentials");
  }

  if (nuxtStorybookConfig.modules !== false) {
    const {
      exclude = []
    } = nuxtStorybookConfig.modules;
    await nuxt.callHook("storybook:config", nuxtStorybookConfig);
    nuxtStorybookConfig.stories = nuxtStorybookConfig.stories.filter(story => !exclude.some(e => story.directory ? story.directory.match(e) : story.match(e)));
  }

  const normalize = _path => (0, _pathe.normalize)(_path.replace(/^~~/, _path2.default.relative(nuxtStorybookConfig.configDir, options.rootDir)).replace(/^~/, _path2.default.relative(nuxtStorybookConfig.configDir, srcDir)));

  nuxtStorybookConfig.stories = nuxtStorybookConfig.stories.map(story => {
    if (story.directory) {
      story.directory = normalize(story.directory);
      return story;
    }

    return normalize(story);
  });
  return nuxtStorybookConfig;
}