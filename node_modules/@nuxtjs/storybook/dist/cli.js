"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.run = run;
exports.usage = void 0;

var _fs = require("fs");

var _pathe = require("pathe");

var _arg = _interopRequireDefault(require("arg"));

var _utils = require("./utils");

var _index = require("./index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const usage = "nuxt storybook [`dev`|`build`] [`dir`]";
exports.usage = usage;

function _run() {
  const args = (0, _arg.default)({
    "--config-file": String,
    "-c": "--config-file",
    "--static-dir": String,
    "-s": "--static-dir",
    "--output-dir": String,
    "-o": "--output-dir",
    "--quiet": Boolean,
    "--smoke-test": Boolean,
    "--ci": Boolean,
    "--port": Number,
    "-p": "--port",
    "--host": String,
    "-h": "--host",
    "--force": Boolean,
    "--tsconfig": String,
    "--no-manager-cache": Boolean,
    "--webpack-stats-json": String
  });
  const {
    _,
    ...flags
  } = args;
  let [mode, _dir] = _;

  if (!_dir && (0, _fs.existsSync)(mode)) {
    _dir = mode || ".";
    mode = "dev";
  } else {
    _dir = _dir || ".";
    mode = mode || "dev";
  }

  const rootDir = (0, _pathe.resolve)(process.cwd(), _dir);

  switch (mode) {
    case "build":
      return (0, _index.build)({
        rootDir,
        mode,
        ...(0, _utils.normalizeFlags)(flags)
      });

    case "eject":
      return (0, _index.eject)({
        rootDir,
        mode: "dev",
        ...(0, _utils.normalizeFlags)(flags)
      });

    case "dev":
      process.env.NODE_ENV = process.env.NODE_ENV || "development";
      return (0, _index.start)({
        rootDir,
        mode,
        ...(0, _utils.normalizeFlags)(flags)
      });

    default:
      _utils.logger.error(`Command "${mode}" not found`);

  }
}

function run() {
  try {
    _run();
  } catch (err) {
    _utils.logger.fatal(err);

    process.exit(1);
  }
}

if (!module.parent) {
  run();
}